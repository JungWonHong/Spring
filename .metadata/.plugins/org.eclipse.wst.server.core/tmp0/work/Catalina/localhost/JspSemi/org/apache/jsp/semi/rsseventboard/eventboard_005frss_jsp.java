/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.44
 * Generated at: 2017-08-04 00:41:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.semi.rsseventboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URL;
import java.util.List;
import org.xml.sax.InputSource;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;

public final class eventboard_005frss_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.xml.sax.InputSource");
    _jspx_imports_classes.add("org.jdom.input.SAXBuilder");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.jdom.Document");
    _jspx_imports_classes.add("java.net.URL");
    _jspx_imports_classes.add("org.jdom.Element");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    List list = null;
    try{
        SAXBuilder parser = new SAXBuilder();
        parser.setValidation(false);
        parser.setIgnoringElementContentWhitespace(true);
        URL url = new URL("http://feed43.com/0206465874522756.xml");
        InputSource is = new InputSource(url.openStream());
        Document doc = parser.build(is);
        Element root = doc.getRootElement();
        Element channel = root.getChild("channel");
        list = channel.getChildren("item");
    }catch(Exception e){
        e.getStackTrace();
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>공모전 게시판(RSS)</title>\r\n");
      out.write(" <link href=\"./css/top.css\" type=\"text/css\" rel=\"stylesheet\"> \r\n");
      out.write(" <link href=\"./css/board.css\" type=\"text/css\" rel=\"stylesheet\"> \r\n");
      out.write("<style>\r\n");
      out.write(".event {\r\n");
      out.write("\tborder: 1px solid #ccc;\r\n");
      out.write("\twidth:800px;\r\n");
      out.write("\theight: 400px;\r\n");
      out.write("\tmargin:auto;\r\n");
      out.write("\toverflow: hidden;\r\n");
      out.write("}\r\n");
      out.write("ul {\r\n");
      out.write("\tlist-style:none;\r\n");
      out.write("\tmargin:0;\r\n");
      out.write("\tpadding:0;\r\n");
      out.write("}\r\n");
      out.write("li{\r\n");
      out.write("\tmargin: 0 0 0 0;\r\n");
      out.write("\tpadding: 0 0 0 0;\r\n");
      out.write("\tborder: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("li>a:link {\r\n");
      out.write("   text-decoration: none;\r\n");
      out.write("   color: #F7CA18;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("li>a:visited {\r\n");
      out.write("   text-decoration: none;\r\n");
      out.write("   color: #F7CA18;\r\n");
      out.write("}  \r\n");
      out.write(".roll-wrapper, .roll-wrapper li {\r\n");
      out.write("\tdisplay:inline;\r\n");
      out.write("\tfloat: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/jquery-3.2.1.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function() {\r\n");
      out.write("\t   function rolliTem(){$(\".roll-wrapper li:first\").slideUp(function(){$(this).appendTo($(\".roll-wrapper\")).slideDown()})}\r\n");
      out.write("\t   var rollStart= setInterval(function(){ rolliTem()},5000);\r\n");
      out.write("\t   $(\".roll-wrapper li\").bind(\"mouseenter mouseleave\", function(e) {\r\n");
      out.write("\t      if (e.type == 'mouseenter') { clearInterval(rollStart); }\r\n");
      out.write("\t      else { rollStart = setInterval(function(){ rolliTem()},5000); }\r\n");
      out.write("\t   });\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../Header.jsp", out, false);
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../menubar.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"row\">\r\n");
      out.write("    <div class=\"col-md-12 text-center\">\r\n");
      out.write("      <h1 class=\"mrng-60-top\">공모전</h1>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"event\">\r\n");
      out.write("<ul class=\"roll-wrapper\">\r\n");

    if(list!=null){
        for(int i=0; i<list.size(); i++){
            Element el = (Element) list.get(i);

      out.write("\r\n");
      out.write("    <li ><a href='");
      out.print(el.getChildText("link"));
      out.write("' target=_news>\r\n");
      out.write("        ");
      out.print(el.getChildText("title"));
      out.write("</a>\r\n");
      out.write("        ");
      out.print(el.getChildText("description") );
      out.write("\r\n");
      out.write("        </li>\r\n");

        }
    }else{

      out.write("\r\n");
      out.write("    <li>잠시 후 다시 접속하여 주십시오.</li>\r\n");

    }

      out.write("\r\n");
      out.write("</ul>\r\n");
      out.write("</div>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../Footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
