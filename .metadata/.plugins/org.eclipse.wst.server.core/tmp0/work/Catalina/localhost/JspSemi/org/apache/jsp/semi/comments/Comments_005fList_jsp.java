/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.44
 * Generated at: 2017-08-03 15:07:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.semi.comments;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import semi.db.bean.*;

public final class Comments_005fList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("semi.db.bean");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	List<CommentsBean> commentslist = (ArrayList<CommentsBean>) request.getAttribute("commentslist");
	int listcount = ((Integer) request.getAttribute("cmtlistcount")).intValue();
	int nowpage = ((Integer) request.getAttribute("cmtpage")).intValue();
	int maxpage = ((Integer) request.getAttribute("cmtmaxpage")).intValue();
	int startpage = ((Integer) request.getAttribute("cmtstartpage")).intValue();
	int endpage = ((Integer) request.getAttribute("cmtendpage")).intValue();

	String id = (String) session.getAttribute("id");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>댓글 게시판</title>\r\n");
      out.write("<link href=\"./css/top.css\" type=\"text/css\" rel=\"stylesheet\">\r\n");
      out.write("<link href=\"./css/board.css\" type=\"text/css\" rel=\"stylesheet\">\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t//댓글 수정창\r\n");
      out.write("\tfunction cmtUpdateOpen(com_no){\r\n");
      out.write("     window.name = \"parentForm\"; \r\n");
      out.write("    window.open(\"CommentsModify.co?com_no=\"+com_no,\r\n");
      out.write("                \"Comments_Modify\", \"width=570, height=350, resizable = no, scrollbars = no\");\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tfunction cmtDelete(com_no){\r\n");
      out.write("\t\tdocument.myform.action=\"CommentsDeleteAction.co?\" + \"com_no=\" + com_no;\r\n");
      out.write("\t\tdocument.myform.submit();\r\n");
      out.write("\t};\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\ta {\r\n");
      out.write("\t\twidth:50px;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

	if(id != null && id.length() != 0){
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Comments_Write.jsp", out, false);
      out.write('\r');
      out.write('\n');
      out.write('	');
} 
      out.write("\r\n");
      out.write("\t<form name=\"myform\" id=\"myform\" method=\"post\">\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t");

				if (listcount > 0) { //등록된 댓글이 있는 경우입니다.
					
					for (int i = 0; i < commentslist.size(); i++) {
						CommentsBean cb = (CommentsBean) commentslist.get(i);
			
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(cb.getCom_id());
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(cb.getCom_content());
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<td><input type=\"hidden\" name=\"com_no\"\r\n");
      out.write("\t\t\t\t\tvalue=\"");
      out.print(cb.getCom_no());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t");
 int com_no = cb.getCom_no();
						if(id != null && id.length() != 0){
						if(id.equals(cb.getCom_id())){
						
      out.write("\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" value=\"modify\"\r\n");
      out.write("\t\t\t\t\tonclick='cmtUpdateOpen(");
      out.print(com_no);
      out.write(")'>\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" value=\"delete\" onclick='cmtDelete(");
      out.print(com_no);
      out.write(")'>\r\n");
      out.write("\t\t\t\t\t");
}} 
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");

				} //for end
			
      out.write("\r\n");
      out.write("\t\t\t<!-- 페이징 처리하는 문 [이전][1][2][3]..[10][다음] -->\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t");
if (nowpage <= 1) { //1페이지 이하인 경우 
      out.write(" [이전]&nbsp;\r\n");
      out.write("\t\t\t\t\t");

 					} else { //2페이지 이상인 경우
 					
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./sbBoardDetailAction.bo?cmtpage=");
      out.print(nowpage - 1);
      out.write("\"> [이전]</a>&nbsp;\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t");

						for (int a = startpage; a <= endpage; a++) {
								if (a == nowpage) { //현재 페이지
					
      out.write(' ');
      out.write('[');
      out.print(a);
      out.write("]\r\n");
      out.write("\t\t\t\t\t");

						} else { //현재 페이지 아닌 경우 링크
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./sbBoardDetailAction.bo?cmtpage=");
      out.print(a);
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(a);
      out.write("]\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t");
 		}
						}
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write(" \t\t\t\t\t<!-- 현재 페이지가 가장 큰 페이지보다 크거나 같은 경우 [다음]에 링크 걸지 않습니다. -->\r\n");
      out.write("\t\t\t\t\t");

						if (nowpage >= maxpage) {
					
      out.write(" [다음]\r\n");
      out.write("\t\t\t\t\t");

						} else {
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./sbBoardDetailAction.bo?cmtpage=");
      out.print(nowpage + 1);
      out.write("\">[다음]</a>\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t\t");

				//등록된 글이 있는 경우 end
				} else {
			
      out.write("\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=2></td>\r\n");
      out.write("\t\t\t\t<td style=\"text-align: center\"><font size=2>댓글을 등록해주세요</font></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");

				}
			
      out.write("\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
