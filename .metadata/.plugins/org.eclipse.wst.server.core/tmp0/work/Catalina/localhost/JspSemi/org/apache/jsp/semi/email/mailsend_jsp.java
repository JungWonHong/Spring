/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.44
 * Generated at: 2017-08-04 02:03:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.semi.email;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import javax.activation.*;
import javax.mail.*;
import javax.mail.internet.*;

public final class mailsend_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.mail");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.mail.internet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.activation");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

   request.setCharacterEncoding("euc-kr");
   String sender=request.getParameter("sender");
   String receiver=request.getParameter("receiver");
   String subject=request.getParameter("subject");
   String content=request.getParameter("content");
   String memkind=((String)session.getAttribute("memkind"));
   //SMTP 서버 주소를 지정합니다.
   String server="smtp.naver.com";
   
   try{
      //서버 정보를 Properties 객체에 저장합니다.
      Properties properties = new Properties();
   
   //SMTP 서버 정보 설정
   //네이버 일 경우 stmp.naver.com
   properties.put("mail.smtp.host",server);
   
   //저장한 Properties객체의 값으로 세션의 인스턴스를 생성합니다.
   //public static Session getDefaultInstance(Properties properties);
   Session s = Session.getDefaultInstance(properties);
   
   //보내는 메일과 받는 주소를 설정합니다.
   Address sender_address= new InternetAddress(sender);
   Address receiver_address= new InternetAddress(receiver);
   
   //메일을 보내기 위한 정보를 입력하기 위해 Message 객체를 생성합니다.
   Message message = new MimeMessage(s);
   
   //보내는 메일의 내용이 한글일 경우 깨지지 않도록 content-type을 지정합니다.
   message.setHeader("content-type", "text/html;charset=euc-kr");
   
   //보내는 메일 주소 정보를 설정합니다.
   message.setFrom(sender_address);
   
   //받는 메일 주소 정보를 설정합니다.
   //Message.RecipienType는 Message 클래스에서 허용하는 수신자 유형을 정의합니다.
   //Message.RecipientType.To : 받는 사람을 의미합니다.
   message.addRecipient(Message.RecipientType.TO, receiver_address);
   
   //제목 정보를 설정합니다.
   message.setSubject(subject);
   
   //내용 정보를 설정합니다.
   if(memkind!=null){
	   if(memkind.equals("1")){
		   String p_email=request.getParameter("p_email");
		   message.setContent(content+"<br>" + "From : "+ p_email, "text/html;charset=euc-kr");
	   } else {
	   	   String e_email=request.getParameter("e_email");
	   	   message.setContent(content +"<br>" + "From : "+e_email, "text/html;charset=euc-kr");
	   }
   }else{
	message.setContent(content, "text/html;charset=euc-kr");  
   }
   //보내는 날짜를 설정합니다.
   message.setSentDate(new java.util.Date());
   
   //public Transport getTransport(String protocol)
   //throws NoSuchProviderException
   //지정된 프로토콜(smtp)을 구현하는 Transport 객체를 가져옵니다.
   Transport transport = s.getTransport("smtp");
   
   //첫번째 인자는 연결할 호스트입니다.
   //두번째 인자는 아이디, 세번째 인자는 비밀번호를 의미합니다.
   transport.connect(server,"hermes89", "eunheechoi89");
   
   //getAllRecipients() : 메세지의 모든 수신자 주소를 가져옵니다.
   //지정한 주소 목록으로 메세지를 보냅니다.
   transport.sendMessage(message, message.getAllRecipients());
   
   //연결을 종료합니다.
   transport.close();
   
   out.println("<h3 margin='100px auto'>메일이 정상적으로 전송되었습니다.</h3>");
}catch(Exception e){
   out.println("SMTP 서버가 잘못 설정되었거나, 서비스에 문제가 있습니다.");
   e.printStackTrace();
}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link href=\"./css/board.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n");
      out.write("<link href=\"./css/top.css\" rel=\"stylesheet\" type=\"text/css\"/>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<a href=\"javascript:self.close();\">돌아가기</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
