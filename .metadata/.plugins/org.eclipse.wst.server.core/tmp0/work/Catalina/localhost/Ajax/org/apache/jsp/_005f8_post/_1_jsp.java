/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.45
 * Generated at: 2017-08-11 05:50:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._005f8_post;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>전송 데이터가 한 개인 경우</title>\r\n");
      out.write("\t\t<script src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t - $.post() 메서드는 post방식으로 서버와 통신하는 jQuery 메서드입니다.\r\n");
      out.write("\t\t \t- $.post() 메서드는 서버의 welcome.jsp 페이지를 post방식으로 요청합니다.\r\n");
      out.write("\t\t \t  첫 번째 매개변수 : 두 번째 매개변수에 있는 데이터를 보낼 곳입니다.\r\n");
      out.write("\t\t \t  두 번째 매개변수 : 전송할 데이터입니다.\r\n");
      out.write("\t\t \t  세 번째 매개변수 : 서버로 부터 결과 데이터를 받아옵니다.\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t$(function(){\r\n");
      out.write("\t\t\t\t$('form').submit(function(){\r\n");
      out.write("\t\t\t\t\t//서버로 보낼 데이터를 입력창에서 얻어옵니다.\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t//입력창에서 입력받은 데이터를 문자열 형식으로 변환합니다.\r\n");
      out.write("\t\t\t\t\tvar username = $('.username').val();\r\n");
      out.write("\t\t\t\t\tvar sendData = \"username=\" + username;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t$.post(\t//post 방식으로 자료를 전달합니다.\r\n");
      out.write("\t\t\t\t\t\t\t\"welcome.jsp\",  //문자열 형식의 파라미터를 welcome.jsp로 보냅니다.\r\n");
      out.write("\t\t\t\t\t\t\tsendData,\t\t//username=\"홍길동\"; 형식으로 전송합니다.\r\n");
      out.write("\t\t\t\t\t\t\tfunction(msg){  //서버의 welcome.jsp 에서는 받은 데이터를\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t//인사말 덧붙여서 돌려줍니다.\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t//콜백함수는 서버에서 보내온 데이터를 매개변수로\r\n");
      out.write("\t\t\t\t\t\t\talert(msg);\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t//<div>태그는 영역을 설정하기 위한 태그입니다.\r\n");
      out.write("\t\t\t\t\t\t\t//영역 설정된 곳에 msg를 html화 합니다.\r\n");
      out.write("\t\t\t\t\t\t\t//서버로부터 받은 데이터를 id가 message인 엘리먼트에 설정합니다.\r\n");
      out.write("\t\t\t\t\t\t\t$('#message').html(msg);\r\n");
      out.write("\t\t\t\t\t}); //post end\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t}); //submit end\r\n");
      out.write("\t\t\t}); //ready end\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<form>\r\n");
      out.write("\t\t\t<label>이름을 입력하세요 : </label>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"username\" class=\"username\"><br>\r\n");
      out.write("\t\t\t<input type=\"submit\" id=\"submit\" value=\"전송\">\r\n");
      out.write("\t\t\t<div id=\"message\"></div>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
