/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.45
 * Generated at: 2017-08-14 04:31:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._005f10_dbpost.ex2_005finsert_005fdirect;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class form2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>DB Basic</title>\r\n");
      out.write("\t\t<script src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t\t$(document).ready(function(){\r\n");
      out.write("\t\t\t\t//데이터를 보여주는 함수\r\n");
      out.write("\t\t\t\tfunction selectData(){\r\n");
      out.write("\t\t\t\t\t//#output 내부의 내용물을 제거합니다.\r\n");
      out.write("\t\t\t\t\t$('#output').empty();\r\n");
      out.write("\t\t\t\t\tvar data = $(\"#insert_form\").serialize();\r\n");
      out.write("\t\t\t\t\t//Ajax를 수행합니다.\r\n");
      out.write("\t\t\t\t\t$.getJSON('products2.jsp', data, function(rdata){\r\n");
      out.write("\t\t\t\t\t\t$(rdata).each(function(index, item){\r\n");
      out.write("\t\t\t\t\t\t\tvar output = '';\r\n");
      out.write("\t\t\t\t\t\t\toutput += '<tr>';\r\n");
      out.write("\t\t\t\t\t\t\toutput += '\t<td>' + item.id + '</td>'; //this.id\r\n");
      out.write("\t\t\t\t\t\t\toutput += '\t<td>' + item.name + '</td>';\r\n");
      out.write("\t\t\t\t\t\t\toutput += '\t<td>' + item.modelnumber + '</td>';\r\n");
      out.write("\t\t\t\t\t\t\toutput += '\t<td>' + item.series + '</td>';\r\n");
      out.write("\t\t\t\t\t\t\toutput += '</tr>'\r\n");
      out.write("\t\t\t\t\t\t\t$('#output').append(output);\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t});//getJSON end\r\n");
      out.write("\t\t\t\t} //selectData end\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//초기 화면에 데이터를 표시합니다.\r\n");
      out.write("\t\t\t\tselectData();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//데이터를 추가합니다.\r\n");
      out.write("\t\t\t\t$('#insert_form').submit(function(event){\r\n");
      out.write("\t\t\t\t\tif($(\"#name\").val() == \"\"){\r\n");
      out.write("\t\t\t\t\t\talert(\"상품명 입력하세요\");\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif($(\"#modelnumber\").val() == \"\"){\r\n");
      out.write("\t\t\t\t\t\talert(\"modelnumber를 입력하세요\");\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif($(\"#series\").val() == \"\"){\r\n");
      out.write("\t\t\t\t\t\talert(\"series를 입력하세요\");\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tselectData();\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t//기본 이벤트를 제거합니다.\r\n");
      out.write("\t\t\t\t\tevent.preventDefault();\r\n");
      out.write("\t\t\t\t}); //submit end\r\n");
      out.write("\t\t\t}); //ready end\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<form id=\"insert_form\">\r\n");
      out.write("\t\t\t\t<fieldset>\r\n");
      out.write("\t\t\t\t\t<legend>데이터 추가</legend>\r\n");
      out.write("\t\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><label>상품명</label></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"name\" id=\"name\"/></td>\r\n");
      out.write("\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><label>모델번호</label></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"modelnumber\" id=\"modelnumber\"/></td>\r\n");
      out.write("\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><label>시리즈</label></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"series\" id=\"series\"/></td>\r\n");
      out.write("\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"submit\" value=\"추가\"/>\r\n");
      out.write("\t\t\t\t</fieldset>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<table border=\"1\">\r\n");
      out.write("\t\t\t<thead>\r\n");
      out.write("\t\t\t\t<tr><th>아이디</th><th>상품명</th><th>모델 번호</th><th>시리즈</th></tr>\r\n");
      out.write("\t\t\t</thead>\r\n");
      out.write("\t\t\t<tbody id=\"output\">\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
