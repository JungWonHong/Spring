/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.45
 * Generated at: 2017-08-11 03:52:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._005f5_getJSON;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _1_0028getJSON_0029_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>Insert title here</title>\r\n");
      out.write("\t\t<style>\r\n");
      out.write("\t\t\ttd{\r\n");
      out.write("\t\t\t\tborder : 1px solid gray;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t</style>\r\n");
      out.write("\t\t<script src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n");
      out.write("\t\t<script>\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\t - 서버로 부터 get방식의 요청을 하고, 응답을 JSON 형식으로 받기 위해서\r\n");
      out.write("\t\t   $.getJSON()메서드를 사용합니다.\r\n");
      out.write("\t\t - $.getJSON()메서드의 첫번째 매개변수는 서버의 URL주소를 지정합니다.\r\n");
      out.write("\t\t   ('item.json')\r\n");
      out.write("\t\t - 서버로 요청이 성공적으로 완료되면,\r\n");
      out.write("\t\t      두번째 매개변수로 기술한 콜백함수가 호출됩니다. (function(data, textStatus))\r\n");
      out.write("\t\t      콜백함수의 첫번째 매개변수인 data는 서버에서 돌려받은 JSON 객체 형식의 데이터이고,\r\n");
      out.write("\t\t      두번째 매개변수인 textStatus는 성공일때 \"success\" 라는 문자열이 전달됩니다.\r\n");
      out.write("\t\t      \r\n");
      out.write("\t\t      자바스크립트의 JSON객체는 JSON데이터를 자바스크립트 객체로 변환할 수 있습니다.\r\n");
      out.write("\t\t      또한 자바스크립트 객체를 문자열로 변환하기도 합니다.\r\n");
      out.write("\t\t   - JSON.stringfy()메서드는 자바스크립트 객체를 JSON형식의 문자열로 변환합니다.\r\n");
      out.write("\t\t   \t  이를 이용해서 자바스크립트 객체를 브라우저로부터 다른 애플리케이션으로 전송할 수 있습니다.\r\n");
      out.write("\t\t   - JSON.parse()메서드는 JSON데이터를 브라우저가 사용할 수 있는 자바스크립트\r\n");
      out.write("\t\t   \t  객체로 변환합니다.\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(function(){\r\n");
      out.write("\t\t\t$(\"button\").click(function(){ //변경을 클릭하면\r\n");
      out.write("\t\t\t\t$.getJSON('item.json', function(data, textStatus){\r\n");
      out.write("\t\t\t\t\t//.getJSON()을 사용할 경우에는 키를 알고 있어야 값을 구할 수 있습니다.\r\n");
      out.write("\t\t\t\t\t$(\"#treeData\").append(\r\n");
      out.write("\t\t\t\t\t\t\t\"<tr><td>id</td><td>name</td>\"\r\n");
      out.write("\t\t\t\t\t\t+\t\"<td>price</td><td>description</td></tr>\");\r\n");
      out.write("\t\t\t\t\t$.each(data, function(k){ //each 반복함수(data 끝까지 반복)\r\n");
      out.write("\t\t\t\t\t\t//each() : 반복 하는 메서드로 객체 6개에 대해서 처리합니다.\r\n");
      out.write("\t\t\t\t\t\t// 6개의 객체 중에서 현재 처리 중인 것을 thisㄹ로 접근합니다.\r\n");
      out.write("\t\t\t\t\t\t//this.id : id는 키를 의미하고 this.id는 현재 처리중인 객체의 id키 값을 의미 합니다.\r\n");
      out.write("\t\t\t\t\t\t$(\"#treeData\").append(\"<tr>\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ \"<td>\" + k.id + \"</td>\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ \"<td>\" + k.name + \"</td>\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ \"<td align='right'>\" + k.price + \"</td>\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ \"<td>\" + k.description + \"</td></tr>\");\r\n");
      out.write("\t\t\t\t\t});//each end\r\n");
      out.write("\t\t\t\t}); //getJSON end\r\n");
      out.write("\t\t\t}); //click end\r\n");
      out.write("\t\t});//ready end\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\t\t<button>JSON 데이터를 불러옵니다.</button>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tbody id=\"treeData\"></tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
